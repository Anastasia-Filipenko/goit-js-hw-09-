{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,oBAKjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAgBC,KAAKC,SAAW,GACrCC,YAAW,WAELH,EACFF,EAAQ,uBAAwCM,OAAfR,EAAS,QAAYQ,OAANZ,EAAM,OAEpDO,EAAK,sBAAqCK,OAAfR,EAAS,QAAYQ,OAANZ,EAAM,M,GAEnDA,E,IAZPJ,EAAKC,KAAKgB,iBAAiB,UAgB3B,SAAiBC,GACfA,EAAEC,iBACF,IAAIf,EAAQgB,OAAOpB,EAAKI,MAAMiB,OAC1BhB,EAAOe,OAAOpB,EAAKK,KAAKgB,OACxBf,EAASc,OAAOpB,EAAKM,OAAOe,OAChCjB,GAAgBC,EAChB,IAAK,IAAIG,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EAGrDD,EAAcC,EAFdJ,GAASC,GAGNiB,MAAK,SAAAC,GACJC,EAAA1B,GAAS2B,OAAOC,QAAQH,E,IAEzBI,OAAM,SAAAC,GACLJ,EAAA1B,GAAS2B,OAAOI,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector(\"[name='delay']\"),\n  step: document.querySelector(\"[name='step']\"),\n  amount: document.querySelector(\"[name='amount']\"),\n};\n\nrefs.form.addEventListener('submit', onStart);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n   const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      \n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n};\n\nfunction onStart(e) {\n  e.preventDefault();\n  let delay = Number(refs.delay.value);\n  let step = Number(refs.step.value);\n  let amount = Number(refs.amount.value);\n  delay = delay - step;\n  for (let position = 1; position <= amount; position += 1) {\n    delay += step;\n\n    createPromise(position, delay)\n      .then(result => {\n        Notiflix.Notify.success(result);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(error);\n      });\n  };\n};\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","e","preventDefault","Number","value","then","result","$parcel$interopDefault","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.8a2531a8.js.map"}